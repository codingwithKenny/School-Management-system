<!-- schema prisma  -->

generator client {
    provider = "prisma-client-js"
  }
  
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }
  
  model Admin {
    id       Int    @id @default(autoincrement())
    username String @unique
  }
  
  model Student {
    id          String       @id
    username    String       @unique
    name        String
    surname     String
    email       String?      @unique
    phone       String?      @unique
    address     String
    img         String?
    bloodType   String
    sex         UserSex
    createdAt   DateTime     @default(now())
    parentId    String
    parent      Parent       @relation(fields: [parentId], references: [id])
    classId     Int
    class       Class        @relation(fields: [classId], references: [id])
    gradeId     Int
    grade       Grade        @relation(fields: [gradeId], references: [id])
    attendances Attendance[]
    results     Result[]
    birthday    DateTime
  }
  
  model Teacher {
    id        String    @id
    username  String    @unique
    name      String
    surname   String
    email     String?   @unique
    phone     String?   @unique
    address   String
    img       String?
    bloodType String
    sex       UserSex
    createdAt DateTime  @default(now())
    subjects  Subject[]
    lessons   Lesson[]
    classes   Class[]
    birthday  DateTime
  }
  
  model Parent {
    id        String    @id
    username  String    @unique
    name      String
    surname   String
    email     String?   @unique
    phone     String    @unique
    address   String
    createdAt DateTime  @default(now())
    students  Student[]
  }
  
  model Grade {
    id       Int       @id @default(autoincrement())
    level    Int       @unique
    students Student[]
    classes  Class[]
  }
  
  model Class {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    capacity    Int
    supervisorId String?
    supervisor  Teacher?      @relation(fields: [supervisorId], references: [id])
    lessons     Lesson[]
    students    Student[]
    gradeId     Int
    grade       Grade         @relation(fields: [gradeId], references: [id])
    events      Event[]
    announcements Announcement[]
  }
  
  model Subject {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    teachers Teacher[]
    lessons  Lesson[]
  }
  
  model Lesson {
    id        Int        @id @default(autoincrement())
    name      String
    day       Day
    startTime DateTime
    endTime   DateTime
    subjectId Int
    subject   Subject    @relation(fields: [subjectId], references: [id])
    classId   Int
    class     Class      @relation(fields: [classId], references: [id])
    teacherId String
    teacher   Teacher    @relation(fields: [teacherId], references: [id])
    exams     Exam[]
    assignments Assignment[]
    attendances Attendance[]
  }
  
  model Exam {
    id        Int      @id @default(autoincrement())
    title     String
    startTime DateTime
    endTime   DateTime
    lessonId  Int
    lesson    Lesson   @relation(fields: [lessonId], references: [id])
    results   Result[]
  }
  
  model Assignment {
    id        Int      @id @default(autoincrement())
    title     String
    startDate DateTime
    dueDate   DateTime
    lessonId  Int
    lesson    Lesson   @relation(fields: [lessonId], references: [id])
    results   Result[]
  }
  
  model Result {
    id           Int        @id @default(autoincrement())
    score        Int
    examId       Int?
    exam         Exam?      @relation(fields: [examId], references: [id])
    assignmentId Int?
    assignment   Assignment? @relation(fields: [assignmentId], references: [id])
    studentId    String
    student      Student    @relation(fields: [studentId], references: [id])
  }
  
  model Attendance {
    id        Int      @id @default(autoincrement())
    date      DateTime
    present   Boolean
    studentId String
    student   Student   @relation(fields: [studentId], references: [id])
    lessonId  Int
    lesson    Lesson    @relation(fields: [lessonId], references: [id])
  }
  
  model Event {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    startTime   DateTime
    endTime     DateTime
    classId     Int?
    class       Class?   @relation(fields: [classId], references: [id])
  }
  
  model Announcement {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    date        DateTime
    classId     Int?
    class       Class?   @relation(fields: [classId], references: [id])
  }
  
  enum UserSex {
    MALE
    FEMALE
  }
  
  enum Day {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
  }

  
  <!-- seed.js -->
   import { Day, PrismaClient, UserSex } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  // ADMIN
  await prisma.admin.create({
    data: {
      id: 1,
      username: "admin1",
    },
  });
  await prisma.admin.create({
    data: {
      id: 2,
      username: "admin2",
    },
  });

  // GRADE
  for (let i = 1; i <= 6; i++) {
    await prisma.grade.create({
      data: {
        level: i,
      },
    });
  }

  // CLASS
  for (let i = 1; i <= 6; i++) {
    await prisma.class.create({
      data: {
        name: `${i}A`,
        gradeId: i,
        capacity: Math.floor(Math.random() * (20 - 15 + 1)) + 15,
      },
    });
  }

  // SUBJECT
  const subjectData = [
    { name: "Mathematics" },
    { name: "Science" },
    { name: "English" },
    { name: "History" },
    { name: "Geography" },
    { name: "Physics" },
    { name: "Chemistry" },
    { name: "Biology" },
    { name: "Computer Science" },
    { name: "Art" },
  ];

  for (const subject of subjectData) {
    await prisma.subject.create({ data: subject });
  }

  // TEACHER
  for (let i = 1; i <= 15; i++) {
    await prisma.teacher.create({
      data: {
        id: `teacher${i}`,
        username: `teacher${i}`,
        name: `TName${i}`,
        surname: `TSurname${i}`,
        email: `teacher${i}@example.com`,
        phone: `123-456-789${i}`,
        address: `Address${i}`,
        bloodType: "A+",
        sex: i % 2 === 0 ? UserSex.MALE : UserSex.FEMALE,
        subjects: { connect: [{ id: (i % 10) + 1 }] },
        classes: { connect: [{ id: (i % 6) + 1 }] },
        birthday: new Date(new Date().setFullYear(new Date().getFullYear() - 30)),
      },
    });
  }

  // LESSON
  for (let i = 1; i <= 30; i++) {
    await prisma.lesson.create({
      data: {
        name: `Lesson${i}`,
        day: Day[
          Object.keys(Day)[
            Math.floor(Math.random() * Object.keys(Day).length)
          ]
        ],
        startTime: new Date(new Date().setHours(new Date().getHours() + 1)),
        endTime: new Date(new Date().setHours(new Date().getHours() + 3)),
        subjectId: (i % 10) + 1,
        classId: (i % 6) + 1,
        teacherId: `teacher${(i % 15) + 1}`,
      },
    });
  }

  // PARENT
  for (let i = 1; i <= 25; i++) {
    await prisma.parent.create({
      data: {
        id: `parentId${i}`,
        username: `parentId${i}`,
        name: `PName ${i}`,
        surname: `PSurname ${i}`,
        email: `parent${i}@example.com`,
        phone: `123-456-789${i}`,
        address: `Address${i}`,
      },
    });
  }

  // STUDENT
  for (let i = 1; i <= 50; i++) {
    await prisma.student.create({
      data: {
        id: `student${i}`,
        username: `student${i}`,
        name: `SName${i}`,
        surname: `SSurname ${i}`,
        email: `student${i}@example.com`,
        phone: `987-654-321${i}`,
        address: `Address${i}`,
        bloodType: "O-",
        sex: i % 2 === 0 ? UserSex.MALE : UserSex.FEMALE,
        parentId: `parentId${Math.ceil(i / 2) % 25 || 25}`,
        gradeId: (i % 6) + 1,
        classId: (i % 6) + 1,
        birthday: new Date(new Date().setFullYear(new Date().getFullYear() - 10)),
      },
    });
  }

  // EXAM
  for (let i = 1; i <= 10; i++) {
    await prisma.exam.create({
      data: {
        title: `Exam ${i}`,
        startTime: new Date(new Date().setHours(new Date().getHours() + 1)),
        endTime: new Date(new Date().setHours(new Date().getHours() + 2)),
        lessonId: (i % 30) + 1,
      },
    });
  }

  // ASSIGNMENT
  for (let i = 1; i <= 10; i++) {
    await prisma.assignment.create({
      data: {
        title: `Assignment ${i}`,
        startDate: new Date(new Date().setHours(new Date().getHours() + 1)),
        dueDate: new Date(new Date().setDate(new Date().getDate() + 1)),
        lessonId: (i % 30) + 1,
      },
    });
  }

  // RESULT
  for (let i = 1; i <= 10; i++) {
    await prisma.result.create({
      data: {
        score: 90,
        studentId: `student${i}`,
        ...(i <= 5 ? { examId: i } : { assignmentId: i - 5 }),
      },
    });
  }

  // ATTENDANCE
  for (let i = 1; i <= 10; i++) {
    await prisma.attendance.create({
      data: {
        date: new Date(),
        present: true,
        studentId: `student${i}`,
        lessonId: (i % 30) + 1,
      },
    });
  }

  // EVENT
  for (let i = 1; i <= 5; i++) {
    await prisma.event.create({
      data: {
        title: `Event ${i}`,
        description: `Description for Event ${i}`,
        startTime: new Date(new Date().setHours(new Date().getHours() + 1)),
        endTime: new Date(new Date().setHours(new Date().getHours() + 2)),
        classId: (i % 5) + 1,
      },
    });
  }

  // ANNOUNCEMENT
  for (let i = 1; i <= 5; i++) {
    await prisma.announcement.create({
      data: {
        title: `Announcement ${i}`,
        description: `Description for Announcement ${i}`,
        date: new Date(),
        classId: (i % 5) + 1,
      },
    });
  }

  console.log("Seeding completed successfully.");
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
